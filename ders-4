--En Pahalı Ürünü Getirin
--En Son Verilen Siparişi Bulun
--Fiyatı Ortalama Fiyattan Yüksek Olan Ürünleri Getirin
--Belirli Kategorilerdeki Ürünleri Listeleyin
--En Yüksek Fiyatlı Ürünlere Sahip Kategorileri Listeleyin
--Bir Ülkedeki Müşterilerin Verdiği Siparişleri Listeleyin
--Her Kategori İçin Ortalama Fiyatın Üzerinde Olan Ürünleri Listeleyin
--Her Müşterinin En Son Verdiği Siparişi Listeleyin
--Her Çalışanın Kendi Departmanındaki Ortalama Maaşın Üzerinde Maaş Alıp Almadığını Bulun
--En Az 10 Ürün Satın Alınan Siparişleri Listeleyin
--Her Kategoride En Pahalı Olan Ürünlerin Ortalama Fiyatını Bulun
--Müşterilerin Verdiği Toplam Sipariş Sayısına Göre Sıralama Yapın
--En Fazla Sipariş Vermiş 5 Müşteriyi ve Son Sipariş Tarihlerini Listeleyin
--Toplam Ürün Sayısı 15'ten Fazla Olan Kategorileri Listeleyin
--En Fazla 5 Farklı Ürün Sipariş Eden Müşterileri Listeleyin
--20'den Fazla Ürün Sağlayan Tedarikçileri Listeleyin
--Her Müşteri İçin En Pahalı Ürünü Bulun
--10.000'den Fazla Sipariş Değeri Olan Çalışanları Listeleyin
--Kategorisine Göre En Çok Sipariş Edilen Ürünü Bulun
--Müşterilerin En Son Sipariş Verdiği Ürün ve Tarihlerini Listeleyin
--Her Çalışanın Teslim Ettiği En Pahalı Siparişi ve Tarihini Listeleyin
--En Fazla Sipariş Verilen Ürünü ve Bilgilerini Listeleyin



--SELECT productname, unitprice
--FROM Products
--ORDER BY unitprice DESC
--LIMIT 1;



--SELECT OrderID, OrderDate
--FROM Orders
--ORDER BY OrderDate DESC
--LIMIT 1;



SELECT ProductName, UnitPrice
FROM Products
WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM Products);



SELECT ProductName, CategoryID, UnitPrice
FROM Products
WHERE CategoryID IN (1, 3, 5);



SELECT CategoryID, MAX(UnitPrice) AS "EN YÜKSEK FİYATI ÜRÜNLER"
FROM Products
GROUP BY CategoryID
ORDER BY "EN YÜKSEK FİYATI ÜRÜNLER" DESC;



SELECT O.OrderID, C.ContactName, O.OrderDate
FROM Orders O
INNER JOIN Customers C ON O.CustomerID = C.CustomerID
WHERE C.Country = 'Germany';



SELECT P.ProductName, P.CategoryID, P.UnitPrice
FROM Products P
WHERE P.UnitPrice >
    (SELECT AVG(P2.UnitPrice)
    FROM Products P2
    WHERE P2.CategoryID = P.CategoryID);



SELECT O.CustomerID, O.OrderID, O.OrderDate
FROM Orders O
WHERE O.OrderDate =
    (SELECT MAX(O2.OrderDate)
    FROM Orders O2
    WHERE O2.CustomerID = O.CustomerID);



SELECT E.FirstName, E.Salary, E.DepartmentID,
    CASE
        WHEN E. > (SELECT AVG(E2.Salary)
                         FROM Employees E2
                         WHERE E2.DepartmentID = E.DepartmentID)
        THEN 'Above Average'
        ELSE 'Below Average'
    END AS SalaryComparison
FROM Employees E;



SELECT O.OrderID, SUM(OD.Quantity) AS TotalQuantity
FROM Orders O
INNER JOIN "Order Details" OD ON O.OrderID = OD.OrderID
GROUP BY O.OrderID
HAVING SUM(OD.Quantity) >= 10;



SELECT CategoryID, AVG(MaxPrice) AS AvgMaxPrice
FROM (
    SELECT CategoryID, MAX(UnitPrice) AS MaxPrice
    FROM Products
    GROUP BY CategoryID
) AS MaxPricesPerCategory
GROUP BY CategoryID;



SELECT C.ContactName, COUNT(O.OrderID) AS TotalOrders
FROM Customers C
INNER JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.CustomerID, C.ContactName
ORDER BY TotalOrders DESC;



SELECT C.ContactName, COUNT(O.OrderID) AS TotalOrders, MAX(O.OrderDate) AS LastOrderDate
FROM Customers C
INNER JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.CustomerID, C.ContactName
ORDER BY TotalOrders DESC
LIMIT 5;



SELECT CategoryID, COUNT(ProductID) AS TotalProducts
FROM Products
GROUP BY CategoryID
HAVING COUNT(ProductID) > 5;



SELECT C.CustomerName, COUNT(DISTINCT OD.ProductID) AS UniqueProducts
FROM Customers C
INNER JOIN Orders O ON C.CustomerID = O.CustomerID
INNER JOIN OrderDetails OD ON O.OrderID = OD.OrderID
GROUP BY C.CustomerID, C.CustomerName
HAVING COUNT(DISTINCT OD.ProductID) <= 5;



SELECT S.ContactName, COUNT(P.ProductID) AS TotalProducts
FROM Suppliers S
INNER JOIN Products P ON S.SupplierID = P.SupplierID
GROUP BY S.SupplierID, S.ContactName
HAVING COUNT(P.ProductID) > 1;



SELECT C.ContactName, P.ProductName, MAX(OD.UnitPrice) AS MaxPrice
FROM Customers C
INNER JOIN Orders O ON C.CustomerID = O.CustomerID
INNER JOIN "Order Details" OD ON O.OrderID = OD.OrderID
INNER JOIN Products P ON OD.ProductID = P.ProductID
GROUP BY C.CustomerID, C.ContactName, P.ProductName;



SELECT E.FirstName, E.LastName, SUM(OD.Quantity * OD.UnitPrice) AS TotalOrderValue
FROM Employees E
INNER JOIN Orders O ON E.EmployeeID = O.EmployeeID
INNER JOIN "Order Details" OD ON O.OrderID = OD.OrderID
GROUP BY E.EmployeeID, E.FirstName, E.LastName
HAVING SUM(OD.Quantity * OD.UnitPrice) > 10000;



SELECT P.CategoryID, P.ProductName, SUM(OD.Quantity) AS TotalOrdered
FROM Products P
INNER JOIN "Order Details" OD ON P.ProductID = OD.ProductID
GROUP BY P.CategoryID, P.ProductID, P.ProductName
ORDER BY P.CategoryID, TotalOrdered DESC;



SELECT C.ContactName, P.ProductName, O.OrderDate
FROM Customers C
INNER JOIN Orders O ON C.CustomerID = O.CustomerID
INNER JOIN "Order Details" OD ON O.OrderID = OD.OrderID
INNER JOIN Products P ON OD.ProductID = P.ProductID
WHERE O.OrderDate = (
    SELECT MAX(O2.OrderDate)
    FROM Orders O2
    WHERE O2.CustomerID = C.CustomerID
);



SELECT E.FirstName, E.LastName, O.OrderID, MAX(OD.Quantity * OD.UnitPrice) AS MaxOrderValue, O.OrderDate
FROM Employees E
INNER JOIN Orders O ON E.EmployeeID = O.EmployeeID
INNER JOIN OrderDetails OD ON O.OrderID = OD.OrderID
GROUP BY E.EmployeeID, E.FirstName, E.LastName, O.OrderID, O.OrderDate;



SELECT P.ProductName, SUM(OD.Quantity) AS TotalOrdered, P.UnitPrice, P.CategoryID
FROM Products P
INNER JOIN OrderDetails OD ON P.ProductID = OD.ProductID
GROUP BY P.ProductID, P.ProductName, P.UnitPrice, P.CategoryID
ORDER BY TotalOrdered DESC
LIMIT 1;


